<%@ WebHandler Language="C#" Class="EchoWebSocket" %>

using System;
using System.Web;
using System.Net.WebSockets;
using System.Web.WebSockets;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

public class EchoWebSocket : IHttpHandler {
        private const int RECURRENT_PUSH_INTERVAL = 10 * 1000;  // 10 secs

        public void ProcessRequest (HttpContext context)
        {
            try
            {
                context.AcceptWebSocketRequest(async wsContext =>
                {
                 
                    WebSocket socket = wsContext.WebSocket;
                    
                    if (socket.State == WebSocketState.Open)
                    {
                        // Announcement when connected
                        var announceString = "EchoWebSocket Connected at: " + DateTime.Now.ToString();
                        ArraySegment<byte> outputBuffer = new ArraySegment<byte>(Encoding.UTF8.GetBytes(announceString));
											
			// Artificially inject a delay to enable the ControlChannelTrigger client app 
                        // to be suspended after sending the HttpRequest.
                        
			System.Threading.Thread.Sleep(5000);

                        await socket.SendAsync(outputBuffer, WebSocketMessageType.Text, true, CancellationToken.None);

                    }
                    
					
					
                    // Stay in loop while websocket is open
                    while (socket.State == WebSocketState.Open)
                    {
                        
			System.Threading.Thread.Sleep(RECURRENT_PUSH_INTERVAL);
						
			// recurrent Push payload
                        var PushPayloadString = "EchoWebSocket Push at: " + DateTime.Now.ToString();
                        ArraySegment<byte> outputBuffer2 = new ArraySegment<byte>(Encoding.UTF8.GetBytes(PushPayloadString));
						
			await socket.SendAsync(outputBuffer2, WebSocketMessageType.Text, true, CancellationToken.None);
						
						
                    }
                });
            }
            catch (Exception ex)
            {
                context.Response.StatusCode = 500;
                context.Response.StatusDescription = ex.Message;
                context.Response.End();
            }
        }

        public bool IsReusable
        {
            get
            {
                return false;
            }
        }
}